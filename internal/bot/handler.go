package bot

import (
	"context"
	"fmt"
	"sort"
	"strings"
	"time"

	"Eldarius_bot/internal/models"
	"Eldarius_bot/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type Handler struct {
	store storage.Repository
	bot   *tgbotapi.BotAPI
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewHandler(store storage.Repository, bot *tgbotapi.BotAPI) *Handler {
	return &Handler{
		store: store,
		bot:   bot,
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (h *Handler) HandleUpdate(update *tgbotapi.Update) error {
	if update.Message == nil {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
	if !h.isBotMentioned(update.Message) {
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
	return h.sendMainMenu(ctx, update.Message.Chat.ID)
}

// isBotMentioned –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
func (h *Handler) isBotMentioned(message *tgbotapi.Message) bool {
	if message.Entities == nil {
		return false
	}

	for _, entity := range message.Entities {
		if entity.Type == "mention" {
			mention := message.Text[entity.Offset : entity.Offset+entity.Length]
			botUsername := "@" + h.bot.Self.UserName
			return mention == botUsername
		}
	}
	return false
}

// sendMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *Handler) sendMainMenu(ctx context.Context, chatID int64) error {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show_birthdays"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add_birthday"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete_birthday"),
		),
	)
	_, err := h.bot.Send(msg)
	return err
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
func (h *Handler) HandleCallback(callback *tgbotapi.CallbackQuery) error {
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
	if strings.HasPrefix(callback.Data, "delete_name_") {
		return h.handleDeleteBirthdayCallback(ctx, callback)
	}

	switch callback.Data {
	case "show_birthdays":
		return h.handleShowBirthdays(ctx, callback.Message.Chat.ID)
	case "add_birthday":
		return h.handleAddBirthday(ctx, callback.Message.Chat.ID)
	case "delete_birthday":
		return h.handleDeleteBirthday(ctx, callback.Message.Chat.ID)
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", callback.Data)
	}
}

// handleShowBirthdays –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Handler) handleShowBirthdays(ctx context.Context, chatID int64) error {
	birthdays, err := h.store.GetBirthdays(ctx, chatID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %w", err)
	}

	if len(birthdays) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ
	sort.Slice(birthdays, func(i, j int) bool {
		now := time.Now()
		nextBirthdayI := getNextBirthday(birthdays[i].Birthday, now)
		nextBirthdayJ := getNextBirthday(birthdays[j].Birthday, now)
		return nextBirthdayI.Before(nextBirthdayJ)
	})

	var text strings.Builder
	text.WriteString("üìÖ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:\n\n")
	for _, b := range birthdays {
		nextBirthday := getNextBirthday(b.Birthday, time.Now())
		daysUntil := int(nextBirthday.Sub(time.Now()).Hours() / 24)

		if daysUntil == 0 {
			text.WriteString(fmt.Sprintf("üéâ %s - –°–ï–ì–û–î–ù–Ø! (%s)\n",
				b.Name,
				b.Birthday.Format("02.01.2006")))
		} else {
			text.WriteString(fmt.Sprintf("üéÇ %s - %d %s (%s)\n",
				b.Name,
				daysUntil,
				getDaysWord(daysUntil),
				b.Birthday.Format("02.01.2006")))
		}
	}

	msg := tgbotapi.NewMessage(chatID, text.String())
	_, err = h.bot.Send(msg)
	return err
}

// getNextBirthday –≤—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func getNextBirthday(birthday time.Time, now time.Time) time.Time {
	nextBirthday := time.Date(now.Year(), birthday.Month(), birthday.Day(), 0, 0, 0, 0, time.Local)
	if nextBirthday.Before(now) {
		nextBirthday = nextBirthday.AddDate(1, 0, 0)
	}
	return nextBirthday
}

// getDaysWord –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
func getDaysWord(days int) string {
	if days%10 == 1 && days%100 != 11 {
		return "–¥–µ–Ω—å"
	}
	if days%10 >= 2 && days%10 <= 4 && (days%100 < 10 || days%100 >= 20) {
		return "–¥–Ω—è"
	}
	return "–¥–Ω–µ–π"
}

// handleAddBirthday –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Handler) handleAddBirthday(ctx context.Context, chatID int64) error {
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì")
	_, err := h.bot.Send(msg)
	return err
}

// handleDeleteBirthday –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Handler) handleDeleteBirthday(ctx context.Context, chatID int64) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
	birthdays, err := h.store.GetBirthdays(ctx, chatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	if len(birthdays) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üìù –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for _, b := range birthdays {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚ùå %s (%s)", b.Name, b.Birthday.Format("02.01.2006")),
				fmt.Sprintf("delete_name_%s", b.Name),
			),
		))
	}

	msg := tgbotapi.NewMessage(chatID, "üóë –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	_, err = h.bot.Send(msg)
	return err
}

// handleDeleteBirthdayCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Handler) handleDeleteBirthdayCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) error {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ callback data
	name := strings.TrimPrefix(callback.Data, "delete_name_")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
	birthdays, err := h.store.GetBirthdays(ctx, callback.Message.Chat.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	// –ò—â–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
	var foundBirthday *models.Birthday
	for _, b := range birthdays {
		if b.Name == name {
			foundBirthday = b
			break
		}
	}

	if foundBirthday == nil {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
		_, err := h.bot.Send(msg)
		return err
	}

	// –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
	if err := h.store.DeleteBirthday(ctx, callback.Message.Chat.ID, foundBirthday.ID); err != nil {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, fmt.Sprintf("‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", foundBirthday.Name))
	_, err = h.bot.Send(msg)
	return err
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *Handler) HandleMessage(message *tgbotapi.Message) error {
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			return h.sendMainMenu(ctx, message.Chat.ID)
		case "help":
			helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/remind - –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø–æ–º—è–Ω—É—Ç—å –±–æ—Ç–∞ (@username) –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.`
			msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
			_, err := h.bot.Send(msg)
			return err
		case "remind":
			return h.handleShowBirthdays(ctx, message.Chat.ID)
		}
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
	if h.isBotMentioned(message) {
		return h.sendMainMenu(ctx, message.Chat.ID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
	if message.ReplyToMessage != nil && message.ReplyToMessage.Text == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì" {
		return h.processAddBirthday(ctx, message)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
	if message.ReplyToMessage != nil && strings.Contains(message.ReplyToMessage.Text, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å") {
		return h.processDeleteBirthdayByName(ctx, message)
	}

	return nil
}

// processAddBirthday –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Handler) processAddBirthday(ctx context.Context, message *tgbotapi.Message) error {
	parts := strings.Fields(message.Text)
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
	dateStr := parts[len(parts)-1]
	birthday, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
		_, err := h.bot.Send(msg)
		return err
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–∫ –∏–º—è
	name := strings.Join(parts[:len(parts)-1], " ")

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
	b := &models.Birthday{
		Name:     name,
		Birthday: birthday,
		GroupID:  message.Chat.ID,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := h.store.AddBirthday(ctx, b); err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", name))
	_, err = h.bot.Send(msg)
	return err
}

// processDeleteBirthdayByName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
func (h *Handler) processDeleteBirthdayByName(ctx context.Context, message *tgbotapi.Message) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
	birthdays, err := h.store.GetBirthdays(ctx, message.Chat.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	// –ò—â–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
	var foundBirthday *models.Birthday
	for _, b := range birthdays {
		if strings.EqualFold(b.Name, message.Text) {
			foundBirthday = b
			break
		}
	}

	if foundBirthday == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
	if err := h.store.DeleteBirthday(ctx, message.Chat.ID, foundBirthday.ID); err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err))
		_, err := h.bot.Send(msg)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", foundBirthday.Name))
	_, err = h.bot.Send(msg)
	return err
}
