package scheduler

import (
	"context"
	"fmt"
	"strings"
	"time"

	"Eldarius_bot/internal/models"
	"Eldarius_bot/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	// Number of days to notify in advance
	advanceNotificationDays = 3
)

// Scheduler –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
type Scheduler struct {
	store storage.Repository
	bot   *tgbotapi.BotAPI
}

// NewScheduler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewScheduler(store storage.Repository, bot *tgbotapi.BotAPI) *Scheduler {
	return &Scheduler{
		store: store,
		bot:   bot,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (s *Scheduler) Start(ctx context.Context) error {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case <-ticker.C:
			if err := s.checkBirthdays(ctx); err != nil {
				// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
				fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %v\n", err)
			}
		}
	}
}

// checkBirthdays –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (s *Scheduler) checkBirthdays(ctx context.Context) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
	groups, err := s.store.GetAllGroups(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
	for _, group := range groups {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
		notifyTime, err := s.store.GetNotifyTime(ctx, group.ID)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã %d: %v\n", group.ID, err)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if !s.shouldNotify(notifyTime) {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
		birthdays, err := s.store.GetUpcomingBirthdays(ctx, group.ID, 7)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã %d: %v\n", group.ID, err)
			continue
		}

		if len(birthdays) == 0 {
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if err := s.sendGroupNotification(ctx, group.ID, birthdays); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É %d: %v\n", group.ID, err)
		}
	}

	return nil
}

// shouldNotify –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (s *Scheduler) shouldNotify(notifyTime time.Time) bool {
	now := time.Now()
	targetTime := time.Date(now.Year(), now.Month(), now.Day(),
		notifyTime.Hour(), notifyTime.Minute(), 0, 0, time.Local)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	return now.Sub(targetTime).Abs() <= time.Minute
}

// sendGroupNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
func (s *Scheduler) sendGroupNotification(ctx context.Context, groupID int64, birthdays []*models.Birthday) error {
	var text strings.Builder
	text.WriteString("üéÇ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n")

	for _, b := range birthdays {
		nextBirthday := getNextBirthday(b.Birthday, time.Now())
		daysUntil := int(nextBirthday.Sub(time.Now()).Hours() / 24)

		if daysUntil == 0 {
			text.WriteString(fmt.Sprintf("üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É %s!\n", b.Name))
		} else {
			text.WriteString(fmt.Sprintf("üìÖ –ß–µ—Ä–µ–∑ %d %s –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É %s\n",
				daysUntil,
				getDaysWord(daysUntil),
				b.Name))
		}
	}

	msg := tgbotapi.NewMessage(groupID, text.String())
	_, err := s.bot.Send(msg)
	return err
}

// getNextBirthday –≤—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func getNextBirthday(birthday time.Time, now time.Time) time.Time {
	nextBirthday := time.Date(now.Year(), birthday.Month(), birthday.Day(), 0, 0, 0, 0, time.Local)
	if nextBirthday.Before(now) {
		nextBirthday = nextBirthday.AddDate(1, 0, 0)
	}
	return nextBirthday
}

// getDaysWord –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
func getDaysWord(days int) string {
	if days%10 == 1 && days%100 != 11 {
		return "–¥–µ–Ω—å"
	}
	if days%10 >= 2 && days%10 <= 4 && (days%100 < 10 || days%100 >= 20) {
		return "–¥–Ω—è"
	}
	return "–¥–Ω–µ–π"
}
