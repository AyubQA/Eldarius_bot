package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	_ "github.com/mattn/go-sqlite3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
type Bot struct {
	api *tgbotapi.BotAPI
	db  *sql.DB
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string, dbPath string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	if err = db.Ping(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	return &Bot{
		api: api,
		db:  db,
	}, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func (b *Bot) Close() {
	if b.db != nil {
		b.db.Close()
	}
}

// getBirthdaysForToday –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
func (b *Bot) getBirthdaysForToday() ([]string, error) {
	today := time.Now().Format("01-02")
	rows, err := b.db.Query(`
		SELECT first_name, last_name 
		FROM birthdays 
		WHERE strftime('%m-%d', birthday) = ?
	`, today)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var birthdays []string
	for rows.Next() {
		var firstName, lastName string
		if err := rows.Scan(&firstName, &lastName); err != nil {
			return nil, err
		}
		birthdays = append(birthdays, fmt.Sprintf("%s %s", firstName, lastName))
	}
	return birthdays, nil
}

// sendBirthdayNotifications –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
func (b *Bot) sendBirthdayNotifications() {
	birthdays, err := b.getBirthdaysForToday()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err)
		return
	}

	if len(birthdays) == 0 {
		return
	}

	message := "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n"
	for _, name := range birthdays {
		message += fmt.Sprintf("- %s\n", name)
	}

	rows, err := b.db.Query("SELECT id FROM groups")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: %v", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var groupID int64
		if err := rows.Scan(&groupID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID –≥—Ä—É–ø–ø—ã: %v", err)
			continue
		}

		msg := tgbotapi.NewMessage(groupID, message)
		if _, err := b.api.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É %d: %v", groupID, err)
		}
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	switch update.Message.Command() {
	case "start":
		msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è. –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
	case "help":
		msg.Text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n" +
			"/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è\n" +
			"/delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n" +
			"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	case "add":
		msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì"
	case "list":
		rows, err := b.db.Query(`
			SELECT first_name, last_name, strftime('%d.%m.%Y', birthday) as birthday
			FROM birthdays
			WHERE group_id = ?
			ORDER BY strftime('%m-%d', birthday)
		`, update.Message.Chat.ID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"
			break
		}
		defer rows.Close()

		var birthdays []string
		for rows.Next() {
			var firstName, lastName, birthday string
			if err := rows.Scan(&firstName, &lastName, &birthday); err != nil {
				continue
			}
			birthdays = append(birthdays, fmt.Sprintf("%s %s - %s", firstName, lastName, birthday))
		}

		if len(birthdays) == 0 {
			msg.Text = "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç"
		} else {
			msg.Text = "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n" + strings.Join(birthdays, "\n")
		}
	case "delete":
		rows, err := b.db.Query(`
			SELECT id, first_name, last_name, strftime('%d.%m.%Y', birthday) as birthday
			FROM birthdays
			WHERE group_id = ?
			ORDER BY strftime('%m-%d', birthday)
		`, update.Message.Chat.ID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"
			break
		}
		defer rows.Close()

		var buttons [][]tgbotapi.InlineKeyboardButton
		for rows.Next() {
			var id int
			var firstName, lastName, birthday string
			if err := rows.Scan(&id, &firstName, &lastName, &birthday); err != nil {
				continue
			}
			button := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s %s - %s", firstName, lastName, birthday),
				fmt.Sprintf("delete_%d", id),
			)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
		}

		if len(buttons) == 0 {
			msg.Text = "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç"
		} else {
			msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
			keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
			msg.ReplyMarkup = keyboard
		}
	}

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleBirthdayAddition –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (b *Bot) handleBirthdayAddition(update tgbotapi.Update) {
	parts := strings.Fields(update.Message.Text)
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì")
		b.api.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
	firstName := parts[0]
	lastName := parts[1]

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
	birthdayStr := parts[2]
	birthday, err := time.Parse("02.01.2006", birthdayStr)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
		b.api.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	_, err = b.db.Exec(`
		INSERT INTO birthdays (first_name, last_name, birthday, group_id)
		VALUES (?, ?, ?, ?)
	`, firstName, lastName, birthday.Format("2006-01-02"), update.Message.Chat.ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è")
		b.api.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è %s %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", firstName, lastName))
	b.api.Send(msg)
}

// handleMention –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
func (b *Bot) handleMention(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
		),
	)
	b.api.Send(msg)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallback(update tgbotapi.Update) {
	callback := update.CallbackQuery
	if callback == nil {
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
	b.api.Send(tgbotapi.NewCallback(callback.ID, ""))

	data := callback.Data
	switch {
	case data == "show":
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
		rows, err := b.db.Query(`
			SELECT first_name, last_name, birthday 
			FROM birthdays 
			WHERE group_id = ? 
			ORDER BY strftime('%m-%d', birthday)
		`, callback.Message.Chat.ID)
		if err != nil {
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				callback.Message.Chat.ID,
				callback.Message.MessageID,
				"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.",
				tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
					),
				),
			)
			b.api.Send(msg)
			return
		}
		defer rows.Close()

		var birthdays []string
		for rows.Next() {
			var firstName, lastName string
			var birthday time.Time
			if err := rows.Scan(&firstName, &lastName, &birthday); err != nil {
				continue
			}
			birthdays = append(birthdays, fmt.Sprintf("%d %s - %s %s",
				birthday.Day(),
				getMonthName(birthday.Month()),
				firstName,
				lastName))
		}

		var messageText string
		if len(birthdays) > 0 {
			messageText = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n" + strings.Join(birthdays, "\n")
		} else {
			messageText = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç"
		}

		msg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			messageText,
			tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
				),
			),
		)
		b.api.Send(msg)

	case data == "add":
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è –î–î.–ú–ú.–ì–ì–ì–ì")
		var buttons [][]tgbotapi.InlineKeyboardButton
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
		))
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		b.api.Send(msg)

	case data == "delete":
		rows, err := b.db.Query(`
			SELECT id, first_name, last_name, strftime('%d.%m', birthday) as birthday
			FROM birthdays 
			WHERE group_id = ?
			ORDER BY strftime('%m-%d', birthday)
		`, callback.Message.Chat.ID)
		if err != nil {
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
			var buttons [][]tgbotapi.InlineKeyboardButton
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
			))
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
			))
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
			))
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
			b.api.Send(msg)
			return
		}
		defer rows.Close()

		var buttons [][]tgbotapi.InlineKeyboardButton
		for rows.Next() {
			var id int
			var firstName, lastName, birthday string
			if err := rows.Scan(&id, &firstName, &lastName, &birthday); err != nil {
				continue
			}
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚ùå %s %s - %s", firstName, lastName, birthday),
					fmt.Sprintf("delete_%d", id),
				),
			))
		}

		if len(buttons) == 0 {
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç")
			var menuButtons [][]tgbotapi.InlineKeyboardButton
			menuButtons = append(menuButtons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
			))
			menuButtons = append(menuButtons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
			))
			menuButtons = append(menuButtons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
			))
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(menuButtons...)
			b.api.Send(msg)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤ –∫–æ–Ω–µ—Ü
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
		))

		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		b.api.Send(msg)

	case strings.HasPrefix(data, "delete_"):
		id := strings.TrimPrefix(data, "delete_")
		_, err := b.db.Exec("DELETE FROM birthdays WHERE id = ?", id)
		if err != nil {
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è")
			var buttons [][]tgbotapi.InlineKeyboardButton
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
			))
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
			))
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
			))
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
			b.api.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
		var buttons [][]tgbotapi.InlineKeyboardButton
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", "show"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "add"),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "delete"),
		))
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		b.api.Send(msg)
	}
}

// getMonthName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
func getMonthName(month time.Month) string {
	months := map[time.Month]string{
		time.January:   "—è–Ω–≤–∞—Ä—è",
		time.February:  "—Ñ–µ–≤—Ä–∞–ª—è",
		time.March:     "–º–∞—Ä—Ç–∞",
		time.April:     "–∞–ø—Ä–µ–ª—è",
		time.May:       "–º–∞—è",
		time.June:      "–∏—é–Ω—è",
		time.July:      "–∏—é–ª—è",
		time.August:    "–∞–≤–≥—É—Å—Ç–∞",
		time.September: "—Å–µ–Ω—Ç—è–±—Ä—è",
		time.October:   "–æ–∫—Ç—è–±—Ä—è",
		time.November:  "–Ω–æ—è–±—Ä—è",
		time.December:  "–¥–µ–∫–∞–±—Ä—è",
	}
	return months[month]
}

// ensureGroupExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
func ensureGroupExists(db *sql.DB, chatID int64, chatTitle string) error {
	var exists bool
	err := db.QueryRow("SELECT EXISTS(SELECT 1 FROM groups WHERE id = ?)", chatID).Scan(&exists)
	if err != nil {
		return err
	}

	if !exists {
		_, err = db.Exec("INSERT INTO groups (id, title) VALUES (?, ?)", chatID, chatTitle)
		if err != nil {
			return err
		}
		// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
		_, err = db.Exec("INSERT INTO settings (group_id, notify_time) VALUES (?, ?)", chatID, "09:00")
		if err != nil {
			return err
		}
	}
	return nil
}

// checkBirthdays –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) checkBirthdays() {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
	rows, err := b.db.Query("SELECT id, notify_time FROM settings")
	if err != nil {
		log.Printf("Error getting groups: %v", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var groupID int64
		var notifyTime string
		if err := rows.Scan(&groupID, &notifyTime); err != nil {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
		now := time.Now()
		currentTime := now.Format("15:04")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if currentTime != notifyTime {
			continue
		}

		// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
		weekBirthdays, err := b.getUpcomingBirthdays(groupID, 7)
		if err != nil {
			log.Printf("Error getting week birthdays: %v", err)
			continue
		}

		if len(weekBirthdays) > 0 {
			message := "üéÇ –í –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n" + strings.Join(weekBirthdays, "\n")
			msg := tgbotapi.NewMessage(groupID, message)
			b.api.Send(msg)
		}

		// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞
		tomorrowBirthdays, err := b.getUpcomingBirthdays(groupID, 1)
		if err != nil {
			log.Printf("Error getting tomorrow birthdays: %v", err)
			continue
		}

		if len(tomorrowBirthdays) > 0 {
			message := "üìÖ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n" + strings.Join(tomorrowBirthdays, "\n")
			msg := tgbotapi.NewMessage(groupID, message)
			b.api.Send(msg)
		}

		// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
		todayBirthdays, err := b.getTodayBirthdays(groupID)
		if err != nil {
			log.Printf("Error getting today birthdays: %v", err)
			continue
		}

		for _, birthday := range todayBirthdays {
			message := fmt.Sprintf("üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, %s! üéâ\n\n"+
				"–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏! "+
				"–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! "+
				"–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–ª—ã–±–∫—É! üåü", birthday)
			msg := tgbotapi.NewMessage(groupID, message)
			b.api.Send(msg)
		}
	}
}

// getUpcomingBirthdays –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
func (b *Bot) getUpcomingBirthdays(groupID int64, days int) ([]string, error) {
	rows, err := b.db.Query(`
		SELECT first_name, last_name, birthday
		FROM birthdays
		WHERE group_id = ?
		AND strftime('%m-%d', birthday) = strftime('%m-%d', date('now', '+' || ? || ' days'))
		ORDER BY strftime('%m-%d', birthday)
	`, groupID, days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var birthdays []string
	for rows.Next() {
		var firstName, lastName string
		var birthday time.Time
		if err := rows.Scan(&firstName, &lastName, &birthday); err != nil {
			continue
		}
		birthdays = append(birthdays, fmt.Sprintf("%d %s - %s %s",
			birthday.Day(),
			getMonthName(birthday.Month()),
			firstName,
			lastName))
	}
	return birthdays, nil
}

// getTodayBirthdays –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
func (b *Bot) getTodayBirthdays(groupID int64) ([]string, error) {
	rows, err := b.db.Query(`
		SELECT first_name, last_name
		FROM birthdays
		WHERE group_id = ?
		AND strftime('%m-%d', birthday) = strftime('%m-%d', 'now')
	`, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var birthdays []string
	for rows.Next() {
		var firstName, lastName string
		if err := rows.Scan(&firstName, &lastName); err != nil {
			continue
		}
		birthdays = append(birthdays, fmt.Sprintf("%s %s", firstName, lastName))
	}
	return birthdays, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		for range ticker.C {
			b.checkBirthdays()
		}
	}()

	for update := range updates {
		if update.Message == nil {
			if update.CallbackQuery != nil {
				b.handleCallback(update)
			}
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
		chat := update.Message.Chat
		if chat == nil {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		if err := ensureGroupExists(b.db, chat.ID, chat.Title); err != nil {
			log.Printf("Error ensuring group exists: %v", err)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
		if update.Message.IsCommand() {
			b.handleCommand(update)
		} else if update.Message.Entities != nil {
			for _, entity := range update.Message.Entities {
				if entity.Type == "mention" {
					mention := update.Message.Text[entity.Offset : entity.Offset+entity.Length]
					if mention == "@"+b.api.Self.UserName {
						b.handleMention(update)
						break
					}
				}
			}
		} else if update.Message.ReplyToMessage != nil && update.Message.ReplyToMessage.From.ID == b.api.Self.ID {
			b.handleBirthdayAddition(update)
		}
	}
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dbPath := os.Getenv("DATABASE_PATH")
	if dbPath == "" {
		log.Fatal("DATABASE_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
	bot, err := NewBot(token, dbPath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}
	defer bot.Close()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	bot.Start()
}
